on: 
  issue_comment:
    types: [created]

permissions:
  id-token: write
  contents: read

jobs:
  parse-args:
    name: parse args from the PR comment
    runs-on: ubuntu-latest
    outputs:
      images_to_build: ${{ steps.parase-build-images.output.images_to_build }}
    if: ${{ github.event.issue.pull_request && startsWith( github.event.comment.body, './')}}
    steps:
      - name: Parse build images
        if: ${{ github.event.issue.pull_request && startsWith( github.event.comment.body, './build_images')}}
        id: parase-build-images
        run: |-
          echo '${{ github.event.comment.body }}'
          # i.e. ./build_image ["cpu"] -> ["cpu"]
          # i.e. ./build_image "cpu" -> "cpu"
          # i.e. ./build_image ["cpu", "vllm"] -> ["cpu", "vllm"]
          command=${{ github.event.comment.body }}
          images_to_build="${command#*./build_image }"
          echo "images_to_build=$images_to_build" >>"$GITHUB_OUTPUT"

  build-docker:
    if: ${{ github.event.issue.pull_request && startsWith( github.event.comment.body, './build_images')}}
    needs: [ parse-args ]
    name: build docker image from PR comment
    uses: ./.github/workflows/docker-nightly-publish.yml
    secrets: inherit
    with:
      pr_issue_number: ${{  github.event.issue.number  }}
      mode: "nightly"
      arch: ${{ needs.parse-args.outputs.images_to_build }}

  pr_commented_build:
    name: PR comment
    if: ${{ github.event.issue.pull_request && startsWith( github.event.comment.body, './build_image')}}
    runs-on: ubuntu-latest
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
      PR_CONTEXT: ${{ toJson(github.event.issue.pull_request) }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/github-script@v7
        id: my-script
        with:
          result-encoding: string
          retries: 3
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Image built'
            })
      - name: Get PR sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          export PR_URL="${{ github.event.issue.pull_request.url }}"
          export PR_NUMBER=${PR_URL##*/}
          export BRANCH_NAME=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
          export BRANCH_HEAD=$(gh pr view $PR_NUMBER --json commits --jq '.commits[-1].oid')
          echo "PR $PR_NUMBER is for $BRANCH_NAME @ $BRANCH_HEAD"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_HEAD=$BRANCH_HEAD" >> $GITHUB_ENV

  test:
    runs-on: ubuntu-latest
    name: test output
    needs: [pr_commented_build]
    env:
      inst_output: ${{ toJson(needs.pr_commented_build.outputs) }}
    steps:
      - name: echo a lot
        run:  |-
          echo $inst_output
          echo $inst_output| jq -r '.a'
          echo $inst_output| jq -r '.b'
          echo $inst_output| jq -r '.c'
