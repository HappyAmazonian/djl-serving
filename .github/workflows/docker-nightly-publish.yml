name: Build and push docker nightly

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'release/nightly/temp, default is nightly'
        required: true
        default: 'nightly'
      arch:
        description: 'which images to build [ cpu, cpu-full, pytorch-inf2, pytorch-gpu, tensorrt-llm, lmi, aarch64]'
        type: string
        required: false
        default: '["cpu", "cpu-full", "pytorch-inf2", "pytorch-gpu", "tensorrt-llm", "lmi", "aarch64"]'
  workflow_call:
    inputs:
      mode:
        description: 'release/nightly/temp, default is nightly'
        type: string
        required: true
        default: 'nightly'
      arch:
        description: 'which images to build [ cpu, cpu-full, pytorch-inf2, pytorch-gpu, tensorrt-llm, lmi, aarch64]'
        type: string
        required: false
        default: '["cpu", "cpu-full", "pytorch-inf2", "pytorch-gpu", "tensorrt-llm", "lmi", "aarch64"]'
    outputs:
      djl_version: 
        description: "djl version"
        value: ${{ jobs.nightly-build.outputs.djl_version }}
permissions:
  id-token: write
  contents: read

env:
  AWS_ECR_REPO: "185921645874.dkr.ecr.us-east-1.amazonaws.com/djl-ci-temp"
  DOCKER_HUB_REPO: "deepjavalibrary/djl-serving"

jobs:
  nightly-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.arch) }}
        exclude:
          - arch: aarch64
    outputs:
      djl_version: ${{ steps.get-versions.outputs.DJL_VERSION }}
    steps:
      - name: Clean disk space
        run: |
          sudo rm -rf \
          /usr/share/dotnet /usr/local/lib/android /opt/ghc \
          /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
          $AGENT_TOOLSDIRECTORY
      - uses: actions/checkout@v4
      - name: install awscli
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::185921645874:role/github-actions-djl-serving
          aws-region: us-east-1
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
      - name: Extract DJL and DJL Serving versions from TOML
        id: get-versions
        run: |
          DJL_VERSION=$(awk -F '=' '/djl / {gsub(/ ?"/, "", $2); print $2}' gradle/libs.versions.toml)
          SERVING_VERSION=$(awk -F '=' '/serving / {gsub(/ ?"/, "", $2); print $2}' gradle/libs.versions.toml)
          echo "DJL_VERSION=$DJL_VERSION" >> $GITHUB_ENV
          echo "SERVING_VERSION=$SERVING_VERSION" >> $GITHUB_ENV
          echo "DJL_VERSION=$DJL_VERSION" >> $GITHUB_OUTPUT
      - name: Build release candidate docker image
        if: ${{ inputs.mode == 'release'}}
        working-directory: serving/docker
        run: |
          export BASE_RELEASE_VERSION="${{ env.SERVING_VERSION }}"
          export RELEASE_VERSION="${{ env.SERVING_VERSION }}-"
          docker compose build --no-cache \
          --build-arg djl_version=${{ env.DJL_VERSION }} \
          --build-arg djl_serving_version=${{ env.SERVING_VERSION }} \
          ${{ matrix.arch }}
      - name: Build temp docker image
        if: ${{ inputs.mode == '' || inputs.mode == 'temp' || inputs.mode == 'nightly' }}
        run: |
          ./gradlew --refresh-dependencies :serving:dockerDeb -Psnapshot
          cd serving/docker
          export NIGHTLY="-nightly"
          echo "NIGHTLY=$NIGHTLY" >> $GITHUB_ENV
          docker compose build --no-cache \
          --build-arg djl_version=${{ env.DJL_VERSION }}-SNAPSHOT \
          --build-arg djl_serving_version=${{ env.SERVING_VERSION }}-SNAPSHOT \
          ${{ matrix.arch }}
      - name: Tag and push temp image to ECR repo
        working-directory: serving/docker
        run: |
          ECR_REGION=$(echo "${{ env.AWS_ECR_REPO }}" | awk -F. '{print $4}')
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${{env.AWS_ECR_REPO}}
          mode=${{ inputs.mode }}
          if [ "${{ inputs.mode }}" == "release" ]; then
            mode=${{ env.DJL_VERSION }}
          fi
          tempRunIdTag="${{ env.AWS_ECR_REPO }}:${{ matrix.arch }}-$mode-${GITHUB_RUN_ID}"
          tempCommitTag="${{ env.AWS_ECR_REPO }}:${{ matrix.arch }}-$mode-${GITHUB_SHA}"

          docker tag ${{ env.DOCKER_HUB_REPO }}:${{ matrix.arch }}${{ env.NIGHTLY }} $tempRunIdTag
          docker tag ${{ env.DOCKER_HUB_REPO }}:${{ matrix.arch }}${{ env.NIGHTLY }} $tempCommitTag
          if ${{ inputs.mode == 'nightly' }}; then
            docker tag ${{ env.DOCKER_HUB_REPO }}:${{ matrix.arch }}${{ env.NIGHTLY }} ${{ env.AWS_ECR_REPO }}:${{ matrix.arch }}-nightly
          fi
          time docker push --all-tags  ${{ env.AWS_ECR_REPO }}

  create-runner:
    if: contains(fromJSON(inputs.arch), 'aarch64')
    runs-on: [ self-hosted, scheduler ]
    steps:
      - name: Create new Graviton instance
        id: create_aarch64
        run: |
          cd /home/ubuntu/djl_benchmark_script/scripts
          token=$( curl -X POST -H "Authorization: token ${{ secrets.ACTION_RUNNER_PERSONAL_TOKEN }}" \
          https://api.github.com/repos/deepjavalibrary/djl-serving/actions/runners/registration-token \
          --fail \
          | jq '.token' | tr -d '"' )
          ./start_instance.sh action_graviton $token djl-serving
    outputs:
      aarch64_instance_id: ${{ steps.create_aarch64.outputs.action_graviton_instance_id }}

  nightly-aarch64:
    if: contains(fromJSON(inputs.arch), 'aarch64')
    runs-on:
      - self-hosted
      - aarch64
      - RUN_ID-${{ github.run_id }}
      - RUN_NUMBER-${{ github.run_number }}
      - SHA-${{ github.sha }}
    timeout-minutes: 60
    needs: create-runner
    steps:
      - uses: actions/checkout@v4
      - name: Clean docker env
        working-directory: serving/docker
        run: |
          yes | docker system prune -a --volumes
      - name: install awscli
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::185921645874:role/github-actions-djl-serving
          aws-region: us-east-1
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
      - uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
      - name: Extract DJL and DJL Serving versions from TOML
        id: get-versions
        run: |
          DJL_VERSION=$(awk -F '=' '/djl / {gsub(/ ?"/, "", $2); print $2}' gradle/libs.versions.toml)
          SERVING_VERSION=$(awk -F '=' '/serving / {gsub(/ ?"/, "", $2); print $2}' gradle/libs.versions.toml)
          echo "DJL_VERSION=$DJL_VERSION" >> $GITHUB_ENV
          echo "SERVING_VERSION=$SERVING_VERSION" >> $GITHUB_ENV
      - name: Build release candidate docker image
        if: ${{ inputs.mode == 'release' }}
        working-directory: serving/docker
        run: |
          export BASE_RELEASE_VERSION="${{ env.SERVING_VERSION }}"
          export RELEASE_VERSION="${{ env.SERVING_VERSION }}-"
          docker compose build --no-cache \
          --build-arg djl_version=${{ env.DJL_VERSION }} \
          --build-arg djl_serving_version=${{ env.SERVING_VERSION }} \
          aarch64
      - name: Build temp docker image
        if: ${{  inputs.mode == '' || inputs.mode == 'temp' || inputs.mode == 'nightly' }}
        run: |
          ./gradlew --refresh-dependencies :serving:dockerDeb -Psnapshot
          cd serving/docker
          export NIGHTLY="-nightly"
          echo "NIGHTLY=$NIGHTLY" >> $GITHUB_ENV
          docker compose build --no-cache \
          --build-arg djl_version=${{ env.DJL_VERSION }}-SNAPSHOT \
          --build-arg djl_serving_version=${{ env.SERVING_VERSION }}-SNAPSHOT \
          aarch64
      - name: Build and push temp image
        working-directory: serving/docker
        run: |
          docker compose build --no-cache \
          --build-arg djl_version=${{ env.DJL_VERSION }}-SNAPSHOT \
          --build-arg djl_serving_version=${{ env.SERVING_VERSION }}-SNAPSHOT \
          aarch64
          ECR_REGION=$(echo "${{ env.AWS_ECR_REPO }}" | awk -F. '{print $4}')
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${{env.AWS_ECR_REPO}}
          mode=${{ inputs.mode }}
          if [ "${{ inputs.mode }}" == "release" ]; then
            mode=${{ env.DJL_VERSION }}
          fi
          tempRunIdTag="${{ env.AWS_ECR_REPO }}aarch64-$mode-${GITHUB_RUN_ID}"
          tempCommitTag="${{ env.AWS_ECR_REPO }}:aarch64-$mode-${GITHUB_SHA}"

          docker tag ${{ env.DOCKER_HUB_REPO }}:aarch64${{ env.NIGHTLY }} $tempRunIdTag
          docker tag ${{ env.DOCKER_HUB_REPO }}:aarch64${{ env.NIGHTLY }} $tempCommitTag
          if ${{ inputs.mode == 'nightly' }}; then
            docker tag ${{ env.DOCKER_HUB_REPO }}:aarch64${{ env.NIGHTLY }} ${{ env.AWS_ECR_REPO }}:aarch64-nightly
          fi
          time docker push --all-tags  ${{ env.AWS_ECR_REPO }}

  stop-runner:
    if: always()
    runs-on: [ self-hosted, scheduler ]
    needs: [nightly-aarch64, create-runner]
    steps:
      - name: Stop all instances
        run: |
          cd /home/ubuntu/djl_benchmark_script/scripts
          instance_id=${{ needs.create-runner.outputs.aarch64_instance_id }}
          ./stop_instance.sh $instance_id
